<?php
//Класс Goods наследуется от абстрактного класса AGoods и имплементирует интерфейс IGoods
class Goods extends AGoods implements IGoods
{
    use TGoods; //подключаем трейт TGoods. Теперь методы данного трейта доступны в данном классе без реализации
//Свойства  - переменные класса или константы
    const MYCONST = "константа"; // Константу нельзя изменить в последствии
    public static $counter_insens = 0; //Создаем статическую переменную. Она будет одна на все объекты данного класса
    public $name; // public (Публичное - Доступен всегда) модификатор доступа, $name - имя свойства, значение будет присвоено в конструкторе класса при его объявлении
    protected $weight = 100; // protected (Защищенное - Доступен только у объектов наследников) модификатор доступа, $weight - имя свойства, 100 - значение присвоенное свойству $name
    public $weightPubl = 100; // public (Публичное - Доступен всегда) модификатор доступа, $weightPubl - имя свойства, 100 - значение присвоенное свойству $name

    //Методы    - функции класса
    public function __construct($name) //магический метод - конструктор класса. Этот метод будет вызван в момент создания объекта(экземпляра) класса автоматически
    {
        self::$counter_insens ++; //Увеличиваем счетчик на 1 при создании экземпляра класса.
        // Внимание! К такой переменной можно обратиться только через ключевое слово self!
        echo "<p>Экземпляр класса ".__CLASS__." создан!</p>"; //Выводим строку что создам экземпляр класса. __CLASS__ - магическая константа, в ней хранится имя данного класса
        $this->name = $name; //При создании объекта мы передаем первым параметром имя товара и присваиваем это имя свойству name
    }
    public function __destruct() //магический метод - деструктор класса. Этот метод будет вызван в момент уничтожения объекта(экземпляра) класса автоматически
    {
        echo "<p>Экземпляр класса ".__CLASS__." удален!</p>"; //Выводим строку что создам экземпляр класса. __CLASS__ - магическая константа, в ней хранится имя данного класса
    }
    public function getProduct():string //public (Публичное - Доступен всегда) модификатор доступа, getProduct имя метода, :string - возвращает значение типа string
    {
        return "Я товар:".$this->name.". Весом: ".$this->weightPubl; //возвращаем строку со значениями как public так и protected !!!$this - переменная означающаяся ЭТОТ объект(экземпляр) класса
    }

    public function getConst():string
    {
        return self::MYCONST; // для получения данных константы используется ключевое слово self и ::
    }
    public function some():void //Данный метод требуется реализовать т.к. мы наследуемся от абстрактного класса AGoods, а в нем данный метод помечен как abstract
    {
        //Пустой метод - заглушка. Нужен т.к. этот метод указан в абстрактном классе как abstract метод.
    }
    public function checkout():void//Данный метод требуется реализовать т.к. он указан в интерфейсе IGoods и является обязательным для реализации
    {

    }
    public function __get($name):string //метод вызывается в случае попытки получить данные свойства
    {
        return "Попытка вызвать не существующее свойство <b>".$name."</b>";
    }
    public function __set($name,$data):void //метод вызывается в случае попытки получить данные свойства
    {
        echo "Попытка установить значение не существующее свойство <b>".$name."</b>";
    }

    public function __call($name,$data):string
    {
        return "Попытка вызвать не существующий метод <b>".$name."</b>";
    }

    public function __toString():string //Метод вызывается при попытке распечатать объект класса
    {
        return "<pre>".$this->weight."</pre>";
    }

    public function __clone():void //Метод вызывается при клонировании объект класса
    {
        //Выполняем код. Например, все необходимое как при запуске конструктора
        echo "<p>Клонирование объекта</p>";
    }

}